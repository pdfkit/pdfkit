#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'rbconfig'
require 'open-uri'
require 'pdfkit/configuration'

def detect_architecture
  case Config::CONFIG['arch']
  when /x86_64-linux/i
    'amd64'
  when /linux/i
    'i386'
  when /darwin/i
    'OS-X.i368'
  else
    raise "No binaries found for your system. Please install by hand."
  end
end

def cleanup(binary,install_to)
  `rm -rf #{binary}*`
  `rm #{install_to}`
end

def download(binary,arch)
  page = open("http://code.google.com/p/wkhtmltopdf/downloads/list").read
  download = page.match(/href=".*name=(.*#{binary}-.*#{arch}.*?)&/) || raise("File not found..")
  download = download[1]
  url = "http://wkhtmltopdf.googlecode.com/files/#{download}"
  puts "Downloading #{download} from #{url}"
  
  `curl #{url} > #{download}`
  download
end

def install(binary,download, arch, install_to)
  puts "Installing #{download} to #{install_to}"
  if download =~ /.tar.bz2$/
    `tar xjvf #{download}`
    `mv #{binary}-#{arch} #{install_to}`
  elsif download =~ /.tar.lzma$/
    raise "couldn't extract archive: lzcat not found" unless system("which lzcat > /dev/null 2>/dev/null")
    `lzcat #{download} | tar x`
    `mv #{binary}-#{arch} #{install_to}`
  else
    `mv #{download} #{install_to}`
  end
  `chmod +x #{install_to}`
end

def install_binary(binary)
  architecture = ENV['ARCHITECTURE'] || detect_architecture
  install_to = ENV['TO'] || PDFKit.configuration.method(binary).call

  Dir.chdir '/tmp'
    
  cleanup(binary,install_to)
  download = download(binary,architecture)
  install(binary,download, architecture, install_to)
end

OptionParser.new do |parser|
  parser.banner = "PDFKit\n\nOptions are:"

  parser.on("--install-wkhtmltopdf", "Install wkhtmltopdf binaries (TO=/usr/local/bin ARCHITECTURE=i386)") do
    install_binary('wkhtmltopdf')
  end

  parser.on("--install-wkhtmltoimage", "Install wkhtmltoimage binaries (TO=/usr/local/bin ARCHITECTURE=i386)") do
    install_binary('wkhtmltoimage')
  end

  parser.on("--version", "Show Version.") do
    root = File.dirname(File.dirname(__FILE__))
    puts File.read(File.join(root, 'VERSION'))
  end

  parser.on("-h", "--help", "Show this.") { puts parser; exit }
end.parse!
